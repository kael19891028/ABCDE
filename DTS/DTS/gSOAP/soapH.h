/* soapH.h
   Generated by gSOAP 2.8.51 for JHService.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__DocAddResponse_DEFINED
#define SOAP_TYPE__tempuri__DocAddResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__DocAddResponse(struct soap*, const char*, int, const _tempuri__DocAddResponse *, const char*);
SOAP_FMAC3 _tempuri__DocAddResponse * SOAP_FMAC4 soap_in__tempuri__DocAddResponse(struct soap*, const char*, _tempuri__DocAddResponse *, const char*);
SOAP_FMAC1 _tempuri__DocAddResponse * SOAP_FMAC2 soap_instantiate__tempuri__DocAddResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__DocAddResponse * soap_new__tempuri__DocAddResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__DocAddResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__DocAddResponse * soap_new_req__tempuri__DocAddResponse(
	struct soap *soap)
{
	_tempuri__DocAddResponse *_p = soap_new__tempuri__DocAddResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__DocAddResponse * soap_new_set__tempuri__DocAddResponse(
	struct soap *soap,
	char *DocAddResult)
{
	_tempuri__DocAddResponse *_p = soap_new__tempuri__DocAddResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__DocAddResponse::DocAddResult = DocAddResult;
	}
	return _p;
}

inline int soap_write__tempuri__DocAddResponse(struct soap *soap, _tempuri__DocAddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DocAddResponse", p->soap_type() == SOAP_TYPE__tempuri__DocAddResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__DocAddResponse(struct soap *soap, const char *URL, _tempuri__DocAddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DocAddResponse", p->soap_type() == SOAP_TYPE__tempuri__DocAddResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__DocAddResponse(struct soap *soap, const char *URL, _tempuri__DocAddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DocAddResponse", p->soap_type() == SOAP_TYPE__tempuri__DocAddResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__DocAddResponse * SOAP_FMAC4 soap_get__tempuri__DocAddResponse(struct soap*, _tempuri__DocAddResponse *, const char*, const char*);

inline int soap_read__tempuri__DocAddResponse(struct soap *soap, _tempuri__DocAddResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__DocAddResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__DocAddResponse(struct soap *soap, const char *URL, _tempuri__DocAddResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__DocAddResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__DocAddResponse(struct soap *soap, _tempuri__DocAddResponse *p)
{
	if (soap_read__tempuri__DocAddResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__DocAdd_DEFINED
#define SOAP_TYPE__tempuri__DocAdd_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__DocAdd(struct soap*, const char*, int, const _tempuri__DocAdd *, const char*);
SOAP_FMAC3 _tempuri__DocAdd * SOAP_FMAC4 soap_in__tempuri__DocAdd(struct soap*, const char*, _tempuri__DocAdd *, const char*);
SOAP_FMAC1 _tempuri__DocAdd * SOAP_FMAC2 soap_instantiate__tempuri__DocAdd(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__DocAdd * soap_new__tempuri__DocAdd(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__DocAdd(soap, n, NULL, NULL, NULL);
}

inline _tempuri__DocAdd * soap_new_req__tempuri__DocAdd(
	struct soap *soap)
{
	_tempuri__DocAdd *_p = soap_new__tempuri__DocAdd(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__DocAdd * soap_new_set__tempuri__DocAdd(
	struct soap *soap,
	char *DocTypeCode,
	char *DocXml)
{
	_tempuri__DocAdd *_p = soap_new__tempuri__DocAdd(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__DocAdd::DocTypeCode = DocTypeCode;
		_p->_tempuri__DocAdd::DocXml = DocXml;
	}
	return _p;
}

inline int soap_write__tempuri__DocAdd(struct soap *soap, _tempuri__DocAdd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DocAdd", p->soap_type() == SOAP_TYPE__tempuri__DocAdd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__DocAdd(struct soap *soap, const char *URL, _tempuri__DocAdd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DocAdd", p->soap_type() == SOAP_TYPE__tempuri__DocAdd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__DocAdd(struct soap *soap, const char *URL, _tempuri__DocAdd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DocAdd", p->soap_type() == SOAP_TYPE__tempuri__DocAdd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__DocAdd * SOAP_FMAC4 soap_get__tempuri__DocAdd(struct soap*, _tempuri__DocAdd *, const char*, const char*);

inline int soap_read__tempuri__DocAdd(struct soap *soap, _tempuri__DocAdd *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__DocAdd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__DocAdd(struct soap *soap, const char *URL, _tempuri__DocAdd *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__DocAdd(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__DocAdd(struct soap *soap, _tempuri__DocAdd *p)
{
	if (soap_read__tempuri__DocAdd(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__AnDonOverResponse_DEFINED
#define SOAP_TYPE__tempuri__AnDonOverResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AnDonOverResponse(struct soap*, const char*, int, const _tempuri__AnDonOverResponse *, const char*);
SOAP_FMAC3 _tempuri__AnDonOverResponse * SOAP_FMAC4 soap_in__tempuri__AnDonOverResponse(struct soap*, const char*, _tempuri__AnDonOverResponse *, const char*);
SOAP_FMAC1 _tempuri__AnDonOverResponse * SOAP_FMAC2 soap_instantiate__tempuri__AnDonOverResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AnDonOverResponse * soap_new__tempuri__AnDonOverResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AnDonOverResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AnDonOverResponse * soap_new_req__tempuri__AnDonOverResponse(
	struct soap *soap)
{
	_tempuri__AnDonOverResponse *_p = soap_new__tempuri__AnDonOverResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AnDonOverResponse * soap_new_set__tempuri__AnDonOverResponse(
	struct soap *soap,
	char *AnDonOverResult)
{
	_tempuri__AnDonOverResponse *_p = soap_new__tempuri__AnDonOverResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AnDonOverResponse::AnDonOverResult = AnDonOverResult;
	}
	return _p;
}

inline int soap_write__tempuri__AnDonOverResponse(struct soap *soap, _tempuri__AnDonOverResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonOverResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonOverResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AnDonOverResponse(struct soap *soap, const char *URL, _tempuri__AnDonOverResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonOverResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonOverResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AnDonOverResponse(struct soap *soap, const char *URL, _tempuri__AnDonOverResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonOverResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonOverResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AnDonOverResponse * SOAP_FMAC4 soap_get__tempuri__AnDonOverResponse(struct soap*, _tempuri__AnDonOverResponse *, const char*, const char*);

inline int soap_read__tempuri__AnDonOverResponse(struct soap *soap, _tempuri__AnDonOverResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__AnDonOverResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AnDonOverResponse(struct soap *soap, const char *URL, _tempuri__AnDonOverResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__AnDonOverResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__AnDonOverResponse(struct soap *soap, _tempuri__AnDonOverResponse *p)
{
	if (soap_read__tempuri__AnDonOverResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__AnDonOver_DEFINED
#define SOAP_TYPE__tempuri__AnDonOver_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AnDonOver(struct soap*, const char*, int, const _tempuri__AnDonOver *, const char*);
SOAP_FMAC3 _tempuri__AnDonOver * SOAP_FMAC4 soap_in__tempuri__AnDonOver(struct soap*, const char*, _tempuri__AnDonOver *, const char*);
SOAP_FMAC1 _tempuri__AnDonOver * SOAP_FMAC2 soap_instantiate__tempuri__AnDonOver(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AnDonOver * soap_new__tempuri__AnDonOver(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AnDonOver(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AnDonOver * soap_new_req__tempuri__AnDonOver(
	struct soap *soap)
{
	_tempuri__AnDonOver *_p = soap_new__tempuri__AnDonOver(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AnDonOver * soap_new_set__tempuri__AnDonOver(
	struct soap *soap,
	char *AnDonCode,
	char *HandleUser,
	char *HandleRemark,
	char *HandleTime,
	char *State)
{
	_tempuri__AnDonOver *_p = soap_new__tempuri__AnDonOver(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AnDonOver::AnDonCode = AnDonCode;
		_p->_tempuri__AnDonOver::HandleUser = HandleUser;
		_p->_tempuri__AnDonOver::HandleRemark = HandleRemark;
		_p->_tempuri__AnDonOver::HandleTime = HandleTime;
		_p->_tempuri__AnDonOver::State = State;
	}
	return _p;
}

inline int soap_write__tempuri__AnDonOver(struct soap *soap, _tempuri__AnDonOver const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonOver", p->soap_type() == SOAP_TYPE__tempuri__AnDonOver ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AnDonOver(struct soap *soap, const char *URL, _tempuri__AnDonOver const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonOver", p->soap_type() == SOAP_TYPE__tempuri__AnDonOver ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AnDonOver(struct soap *soap, const char *URL, _tempuri__AnDonOver const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonOver", p->soap_type() == SOAP_TYPE__tempuri__AnDonOver ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AnDonOver * SOAP_FMAC4 soap_get__tempuri__AnDonOver(struct soap*, _tempuri__AnDonOver *, const char*, const char*);

inline int soap_read__tempuri__AnDonOver(struct soap *soap, _tempuri__AnDonOver *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__AnDonOver(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AnDonOver(struct soap *soap, const char *URL, _tempuri__AnDonOver *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__AnDonOver(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__AnDonOver(struct soap *soap, _tempuri__AnDonOver *p)
{
	if (soap_read__tempuri__AnDonOver(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__AnDonListResponse_DEFINED
#define SOAP_TYPE__tempuri__AnDonListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AnDonListResponse(struct soap*, const char*, int, const _tempuri__AnDonListResponse *, const char*);
SOAP_FMAC3 _tempuri__AnDonListResponse * SOAP_FMAC4 soap_in__tempuri__AnDonListResponse(struct soap*, const char*, _tempuri__AnDonListResponse *, const char*);
SOAP_FMAC1 _tempuri__AnDonListResponse * SOAP_FMAC2 soap_instantiate__tempuri__AnDonListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AnDonListResponse * soap_new__tempuri__AnDonListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AnDonListResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AnDonListResponse * soap_new_req__tempuri__AnDonListResponse(
	struct soap *soap)
{
	_tempuri__AnDonListResponse *_p = soap_new__tempuri__AnDonListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AnDonListResponse * soap_new_set__tempuri__AnDonListResponse(
	struct soap *soap,
	char *AnDonListResult)
{
	_tempuri__AnDonListResponse *_p = soap_new__tempuri__AnDonListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AnDonListResponse::AnDonListResult = AnDonListResult;
	}
	return _p;
}

inline int soap_write__tempuri__AnDonListResponse(struct soap *soap, _tempuri__AnDonListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonListResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AnDonListResponse(struct soap *soap, const char *URL, _tempuri__AnDonListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonListResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AnDonListResponse(struct soap *soap, const char *URL, _tempuri__AnDonListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonListResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AnDonListResponse * SOAP_FMAC4 soap_get__tempuri__AnDonListResponse(struct soap*, _tempuri__AnDonListResponse *, const char*, const char*);

inline int soap_read__tempuri__AnDonListResponse(struct soap *soap, _tempuri__AnDonListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__AnDonListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AnDonListResponse(struct soap *soap, const char *URL, _tempuri__AnDonListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__AnDonListResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__AnDonListResponse(struct soap *soap, _tempuri__AnDonListResponse *p)
{
	if (soap_read__tempuri__AnDonListResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__AnDonList_DEFINED
#define SOAP_TYPE__tempuri__AnDonList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AnDonList(struct soap*, const char*, int, const _tempuri__AnDonList *, const char*);
SOAP_FMAC3 _tempuri__AnDonList * SOAP_FMAC4 soap_in__tempuri__AnDonList(struct soap*, const char*, _tempuri__AnDonList *, const char*);
SOAP_FMAC1 _tempuri__AnDonList * SOAP_FMAC2 soap_instantiate__tempuri__AnDonList(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AnDonList * soap_new__tempuri__AnDonList(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AnDonList(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AnDonList * soap_new_req__tempuri__AnDonList(
	struct soap *soap)
{
	_tempuri__AnDonList *_p = soap_new__tempuri__AnDonList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AnDonList * soap_new_set__tempuri__AnDonList(
	struct soap *soap)
{
	_tempuri__AnDonList *_p = soap_new__tempuri__AnDonList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__AnDonList(struct soap *soap, _tempuri__AnDonList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonList", p->soap_type() == SOAP_TYPE__tempuri__AnDonList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AnDonList(struct soap *soap, const char *URL, _tempuri__AnDonList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonList", p->soap_type() == SOAP_TYPE__tempuri__AnDonList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AnDonList(struct soap *soap, const char *URL, _tempuri__AnDonList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonList", p->soap_type() == SOAP_TYPE__tempuri__AnDonList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AnDonList * SOAP_FMAC4 soap_get__tempuri__AnDonList(struct soap*, _tempuri__AnDonList *, const char*, const char*);

inline int soap_read__tempuri__AnDonList(struct soap *soap, _tempuri__AnDonList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__AnDonList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AnDonList(struct soap *soap, const char *URL, _tempuri__AnDonList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__AnDonList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__AnDonList(struct soap *soap, _tempuri__AnDonList *p)
{
	if (soap_read__tempuri__AnDonList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__AnDonStartResponse_DEFINED
#define SOAP_TYPE__tempuri__AnDonStartResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AnDonStartResponse(struct soap*, const char*, int, const _tempuri__AnDonStartResponse *, const char*);
SOAP_FMAC3 _tempuri__AnDonStartResponse * SOAP_FMAC4 soap_in__tempuri__AnDonStartResponse(struct soap*, const char*, _tempuri__AnDonStartResponse *, const char*);
SOAP_FMAC1 _tempuri__AnDonStartResponse * SOAP_FMAC2 soap_instantiate__tempuri__AnDonStartResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AnDonStartResponse * soap_new__tempuri__AnDonStartResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AnDonStartResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AnDonStartResponse * soap_new_req__tempuri__AnDonStartResponse(
	struct soap *soap)
{
	_tempuri__AnDonStartResponse *_p = soap_new__tempuri__AnDonStartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AnDonStartResponse * soap_new_set__tempuri__AnDonStartResponse(
	struct soap *soap,
	char *AnDonStartResult)
{
	_tempuri__AnDonStartResponse *_p = soap_new__tempuri__AnDonStartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AnDonStartResponse::AnDonStartResult = AnDonStartResult;
	}
	return _p;
}

inline int soap_write__tempuri__AnDonStartResponse(struct soap *soap, _tempuri__AnDonStartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonStartResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonStartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AnDonStartResponse(struct soap *soap, const char *URL, _tempuri__AnDonStartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonStartResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonStartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AnDonStartResponse(struct soap *soap, const char *URL, _tempuri__AnDonStartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonStartResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonStartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AnDonStartResponse * SOAP_FMAC4 soap_get__tempuri__AnDonStartResponse(struct soap*, _tempuri__AnDonStartResponse *, const char*, const char*);

inline int soap_read__tempuri__AnDonStartResponse(struct soap *soap, _tempuri__AnDonStartResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__AnDonStartResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AnDonStartResponse(struct soap *soap, const char *URL, _tempuri__AnDonStartResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__AnDonStartResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__AnDonStartResponse(struct soap *soap, _tempuri__AnDonStartResponse *p)
{
	if (soap_read__tempuri__AnDonStartResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__AnDonStart_DEFINED
#define SOAP_TYPE__tempuri__AnDonStart_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AnDonStart(struct soap*, const char*, int, const _tempuri__AnDonStart *, const char*);
SOAP_FMAC3 _tempuri__AnDonStart * SOAP_FMAC4 soap_in__tempuri__AnDonStart(struct soap*, const char*, _tempuri__AnDonStart *, const char*);
SOAP_FMAC1 _tempuri__AnDonStart * SOAP_FMAC2 soap_instantiate__tempuri__AnDonStart(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AnDonStart * soap_new__tempuri__AnDonStart(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AnDonStart(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AnDonStart * soap_new_req__tempuri__AnDonStart(
	struct soap *soap)
{
	_tempuri__AnDonStart *_p = soap_new__tempuri__AnDonStart(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AnDonStart * soap_new_set__tempuri__AnDonStart(
	struct soap *soap,
	char *CallTypeCode,
	char *Remark,
	char *WorkLineCode,
	char *WorkStationCode,
	char *UserCode)
{
	_tempuri__AnDonStart *_p = soap_new__tempuri__AnDonStart(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AnDonStart::CallTypeCode = CallTypeCode;
		_p->_tempuri__AnDonStart::Remark = Remark;
		_p->_tempuri__AnDonStart::WorkLineCode = WorkLineCode;
		_p->_tempuri__AnDonStart::WorkStationCode = WorkStationCode;
		_p->_tempuri__AnDonStart::UserCode = UserCode;
	}
	return _p;
}

inline int soap_write__tempuri__AnDonStart(struct soap *soap, _tempuri__AnDonStart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonStart", p->soap_type() == SOAP_TYPE__tempuri__AnDonStart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AnDonStart(struct soap *soap, const char *URL, _tempuri__AnDonStart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonStart", p->soap_type() == SOAP_TYPE__tempuri__AnDonStart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AnDonStart(struct soap *soap, const char *URL, _tempuri__AnDonStart const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonStart", p->soap_type() == SOAP_TYPE__tempuri__AnDonStart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AnDonStart * SOAP_FMAC4 soap_get__tempuri__AnDonStart(struct soap*, _tempuri__AnDonStart *, const char*, const char*);

inline int soap_read__tempuri__AnDonStart(struct soap *soap, _tempuri__AnDonStart *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__AnDonStart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AnDonStart(struct soap *soap, const char *URL, _tempuri__AnDonStart *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__AnDonStart(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__AnDonStart(struct soap *soap, _tempuri__AnDonStart *p)
{
	if (soap_read__tempuri__AnDonStart(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__LineInventoryResponse_DEFINED
#define SOAP_TYPE__tempuri__LineInventoryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__LineInventoryResponse(struct soap*, const char*, int, const _tempuri__LineInventoryResponse *, const char*);
SOAP_FMAC3 _tempuri__LineInventoryResponse * SOAP_FMAC4 soap_in__tempuri__LineInventoryResponse(struct soap*, const char*, _tempuri__LineInventoryResponse *, const char*);
SOAP_FMAC1 _tempuri__LineInventoryResponse * SOAP_FMAC2 soap_instantiate__tempuri__LineInventoryResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__LineInventoryResponse * soap_new__tempuri__LineInventoryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__LineInventoryResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__LineInventoryResponse * soap_new_req__tempuri__LineInventoryResponse(
	struct soap *soap)
{
	_tempuri__LineInventoryResponse *_p = soap_new__tempuri__LineInventoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__LineInventoryResponse * soap_new_set__tempuri__LineInventoryResponse(
	struct soap *soap,
	char *LineInventoryResult)
{
	_tempuri__LineInventoryResponse *_p = soap_new__tempuri__LineInventoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__LineInventoryResponse::LineInventoryResult = LineInventoryResult;
	}
	return _p;
}

inline int soap_write__tempuri__LineInventoryResponse(struct soap *soap, _tempuri__LineInventoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryResponse", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__LineInventoryResponse(struct soap *soap, const char *URL, _tempuri__LineInventoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryResponse", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__LineInventoryResponse(struct soap *soap, const char *URL, _tempuri__LineInventoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryResponse", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__LineInventoryResponse * SOAP_FMAC4 soap_get__tempuri__LineInventoryResponse(struct soap*, _tempuri__LineInventoryResponse *, const char*, const char*);

inline int soap_read__tempuri__LineInventoryResponse(struct soap *soap, _tempuri__LineInventoryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__LineInventoryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__LineInventoryResponse(struct soap *soap, const char *URL, _tempuri__LineInventoryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__LineInventoryResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__LineInventoryResponse(struct soap *soap, _tempuri__LineInventoryResponse *p)
{
	if (soap_read__tempuri__LineInventoryResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__LineInventory_DEFINED
#define SOAP_TYPE__tempuri__LineInventory_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__LineInventory(struct soap*, const char*, int, const _tempuri__LineInventory *, const char*);
SOAP_FMAC3 _tempuri__LineInventory * SOAP_FMAC4 soap_in__tempuri__LineInventory(struct soap*, const char*, _tempuri__LineInventory *, const char*);
SOAP_FMAC1 _tempuri__LineInventory * SOAP_FMAC2 soap_instantiate__tempuri__LineInventory(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__LineInventory * soap_new__tempuri__LineInventory(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__LineInventory(soap, n, NULL, NULL, NULL);
}

inline _tempuri__LineInventory * soap_new_req__tempuri__LineInventory(
	struct soap *soap)
{
	_tempuri__LineInventory *_p = soap_new__tempuri__LineInventory(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__LineInventory * soap_new_set__tempuri__LineInventory(
	struct soap *soap,
	char *WorkLineCode,
	char *BillCode,
	char *BarCode)
{
	_tempuri__LineInventory *_p = soap_new__tempuri__LineInventory(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__LineInventory::WorkLineCode = WorkLineCode;
		_p->_tempuri__LineInventory::BillCode = BillCode;
		_p->_tempuri__LineInventory::BarCode = BarCode;
	}
	return _p;
}

inline int soap_write__tempuri__LineInventory(struct soap *soap, _tempuri__LineInventory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventory", p->soap_type() == SOAP_TYPE__tempuri__LineInventory ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__LineInventory(struct soap *soap, const char *URL, _tempuri__LineInventory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventory", p->soap_type() == SOAP_TYPE__tempuri__LineInventory ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__LineInventory(struct soap *soap, const char *URL, _tempuri__LineInventory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventory", p->soap_type() == SOAP_TYPE__tempuri__LineInventory ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__LineInventory * SOAP_FMAC4 soap_get__tempuri__LineInventory(struct soap*, _tempuri__LineInventory *, const char*, const char*);

inline int soap_read__tempuri__LineInventory(struct soap *soap, _tempuri__LineInventory *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__LineInventory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__LineInventory(struct soap *soap, const char *URL, _tempuri__LineInventory *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__LineInventory(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__LineInventory(struct soap *soap, _tempuri__LineInventory *p)
{
	if (soap_read__tempuri__LineInventory(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__BillStateResponse_DEFINED
#define SOAP_TYPE__tempuri__BillStateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__BillStateResponse(struct soap*, const char*, int, const _tempuri__BillStateResponse *, const char*);
SOAP_FMAC3 _tempuri__BillStateResponse * SOAP_FMAC4 soap_in__tempuri__BillStateResponse(struct soap*, const char*, _tempuri__BillStateResponse *, const char*);
SOAP_FMAC1 _tempuri__BillStateResponse * SOAP_FMAC2 soap_instantiate__tempuri__BillStateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__BillStateResponse * soap_new__tempuri__BillStateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__BillStateResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__BillStateResponse * soap_new_req__tempuri__BillStateResponse(
	struct soap *soap)
{
	_tempuri__BillStateResponse *_p = soap_new__tempuri__BillStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__BillStateResponse * soap_new_set__tempuri__BillStateResponse(
	struct soap *soap,
	char *BillStateResult)
{
	_tempuri__BillStateResponse *_p = soap_new__tempuri__BillStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__BillStateResponse::BillStateResult = BillStateResult;
	}
	return _p;
}

inline int soap_write__tempuri__BillStateResponse(struct soap *soap, _tempuri__BillStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:BillStateResponse", p->soap_type() == SOAP_TYPE__tempuri__BillStateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__BillStateResponse(struct soap *soap, const char *URL, _tempuri__BillStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:BillStateResponse", p->soap_type() == SOAP_TYPE__tempuri__BillStateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__BillStateResponse(struct soap *soap, const char *URL, _tempuri__BillStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:BillStateResponse", p->soap_type() == SOAP_TYPE__tempuri__BillStateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__BillStateResponse * SOAP_FMAC4 soap_get__tempuri__BillStateResponse(struct soap*, _tempuri__BillStateResponse *, const char*, const char*);

inline int soap_read__tempuri__BillStateResponse(struct soap *soap, _tempuri__BillStateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__BillStateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__BillStateResponse(struct soap *soap, const char *URL, _tempuri__BillStateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__BillStateResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__BillStateResponse(struct soap *soap, _tempuri__BillStateResponse *p)
{
	if (soap_read__tempuri__BillStateResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__BillState_DEFINED
#define SOAP_TYPE__tempuri__BillState_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__BillState(struct soap*, const char*, int, const _tempuri__BillState *, const char*);
SOAP_FMAC3 _tempuri__BillState * SOAP_FMAC4 soap_in__tempuri__BillState(struct soap*, const char*, _tempuri__BillState *, const char*);
SOAP_FMAC1 _tempuri__BillState * SOAP_FMAC2 soap_instantiate__tempuri__BillState(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__BillState * soap_new__tempuri__BillState(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__BillState(soap, n, NULL, NULL, NULL);
}

inline _tempuri__BillState * soap_new_req__tempuri__BillState(
	struct soap *soap,
	int OverTotal,
	int State)
{
	_tempuri__BillState *_p = soap_new__tempuri__BillState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__BillState::OverTotal = OverTotal;
		_p->_tempuri__BillState::State = State;
	}
	return _p;
}

inline _tempuri__BillState * soap_new_set__tempuri__BillState(
	struct soap *soap,
	char *BillCode,
	int OverTotal,
	char *OverTime,
	int State)
{
	_tempuri__BillState *_p = soap_new__tempuri__BillState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__BillState::BillCode = BillCode;
		_p->_tempuri__BillState::OverTotal = OverTotal;
		_p->_tempuri__BillState::OverTime = OverTime;
		_p->_tempuri__BillState::State = State;
	}
	return _p;
}

inline int soap_write__tempuri__BillState(struct soap *soap, _tempuri__BillState const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:BillState", p->soap_type() == SOAP_TYPE__tempuri__BillState ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__BillState(struct soap *soap, const char *URL, _tempuri__BillState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:BillState", p->soap_type() == SOAP_TYPE__tempuri__BillState ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__BillState(struct soap *soap, const char *URL, _tempuri__BillState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:BillState", p->soap_type() == SOAP_TYPE__tempuri__BillState ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__BillState * SOAP_FMAC4 soap_get__tempuri__BillState(struct soap*, _tempuri__BillState *, const char*, const char*);

inline int soap_read__tempuri__BillState(struct soap *soap, _tempuri__BillState *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__BillState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__BillState(struct soap *soap, const char *URL, _tempuri__BillState *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__BillState(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__BillState(struct soap *soap, _tempuri__BillState *p)
{
	if (soap_read__tempuri__BillState(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__ToolingTimesResponse_DEFINED
#define SOAP_TYPE__tempuri__ToolingTimesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ToolingTimesResponse(struct soap*, const char*, int, const _tempuri__ToolingTimesResponse *, const char*);
SOAP_FMAC3 _tempuri__ToolingTimesResponse * SOAP_FMAC4 soap_in__tempuri__ToolingTimesResponse(struct soap*, const char*, _tempuri__ToolingTimesResponse *, const char*);
SOAP_FMAC1 _tempuri__ToolingTimesResponse * SOAP_FMAC2 soap_instantiate__tempuri__ToolingTimesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__ToolingTimesResponse * soap_new__tempuri__ToolingTimesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__ToolingTimesResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__ToolingTimesResponse * soap_new_req__tempuri__ToolingTimesResponse(
	struct soap *soap)
{
	_tempuri__ToolingTimesResponse *_p = soap_new__tempuri__ToolingTimesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__ToolingTimesResponse * soap_new_set__tempuri__ToolingTimesResponse(
	struct soap *soap,
	char *ToolingTimesResult)
{
	_tempuri__ToolingTimesResponse *_p = soap_new__tempuri__ToolingTimesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__ToolingTimesResponse::ToolingTimesResult = ToolingTimesResult;
	}
	return _p;
}

inline int soap_write__tempuri__ToolingTimesResponse(struct soap *soap, _tempuri__ToolingTimesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ToolingTimesResponse", p->soap_type() == SOAP_TYPE__tempuri__ToolingTimesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__ToolingTimesResponse(struct soap *soap, const char *URL, _tempuri__ToolingTimesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ToolingTimesResponse", p->soap_type() == SOAP_TYPE__tempuri__ToolingTimesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__ToolingTimesResponse(struct soap *soap, const char *URL, _tempuri__ToolingTimesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ToolingTimesResponse", p->soap_type() == SOAP_TYPE__tempuri__ToolingTimesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__ToolingTimesResponse * SOAP_FMAC4 soap_get__tempuri__ToolingTimesResponse(struct soap*, _tempuri__ToolingTimesResponse *, const char*, const char*);

inline int soap_read__tempuri__ToolingTimesResponse(struct soap *soap, _tempuri__ToolingTimesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__ToolingTimesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__ToolingTimesResponse(struct soap *soap, const char *URL, _tempuri__ToolingTimesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__ToolingTimesResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__ToolingTimesResponse(struct soap *soap, _tempuri__ToolingTimesResponse *p)
{
	if (soap_read__tempuri__ToolingTimesResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__ToolingTimes_DEFINED
#define SOAP_TYPE__tempuri__ToolingTimes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ToolingTimes(struct soap*, const char*, int, const _tempuri__ToolingTimes *, const char*);
SOAP_FMAC3 _tempuri__ToolingTimes * SOAP_FMAC4 soap_in__tempuri__ToolingTimes(struct soap*, const char*, _tempuri__ToolingTimes *, const char*);
SOAP_FMAC1 _tempuri__ToolingTimes * SOAP_FMAC2 soap_instantiate__tempuri__ToolingTimes(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__ToolingTimes * soap_new__tempuri__ToolingTimes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__ToolingTimes(soap, n, NULL, NULL, NULL);
}

inline _tempuri__ToolingTimes * soap_new_req__tempuri__ToolingTimes(
	struct soap *soap,
	int Times)
{
	_tempuri__ToolingTimes *_p = soap_new__tempuri__ToolingTimes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__ToolingTimes::Times = Times;
	}
	return _p;
}

inline _tempuri__ToolingTimes * soap_new_set__tempuri__ToolingTimes(
	struct soap *soap,
	char *BillCode,
	char *ToolingCode,
	int Times)
{
	_tempuri__ToolingTimes *_p = soap_new__tempuri__ToolingTimes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__ToolingTimes::BillCode = BillCode;
		_p->_tempuri__ToolingTimes::ToolingCode = ToolingCode;
		_p->_tempuri__ToolingTimes::Times = Times;
	}
	return _p;
}

inline int soap_write__tempuri__ToolingTimes(struct soap *soap, _tempuri__ToolingTimes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ToolingTimes", p->soap_type() == SOAP_TYPE__tempuri__ToolingTimes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__ToolingTimes(struct soap *soap, const char *URL, _tempuri__ToolingTimes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ToolingTimes", p->soap_type() == SOAP_TYPE__tempuri__ToolingTimes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__ToolingTimes(struct soap *soap, const char *URL, _tempuri__ToolingTimes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ToolingTimes", p->soap_type() == SOAP_TYPE__tempuri__ToolingTimes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__ToolingTimes * SOAP_FMAC4 soap_get__tempuri__ToolingTimes(struct soap*, _tempuri__ToolingTimes *, const char*, const char*);

inline int soap_read__tempuri__ToolingTimes(struct soap *soap, _tempuri__ToolingTimes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__ToolingTimes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__ToolingTimes(struct soap *soap, const char *URL, _tempuri__ToolingTimes *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__ToolingTimes(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__ToolingTimes(struct soap *soap, _tempuri__ToolingTimes *p)
{
	if (soap_read__tempuri__ToolingTimes(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__testResponse_DEFINED
#define SOAP_TYPE__tempuri__testResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__testResponse(struct soap*, const char*, int, const _tempuri__testResponse *, const char*);
SOAP_FMAC3 _tempuri__testResponse * SOAP_FMAC4 soap_in__tempuri__testResponse(struct soap*, const char*, _tempuri__testResponse *, const char*);
SOAP_FMAC1 _tempuri__testResponse * SOAP_FMAC2 soap_instantiate__tempuri__testResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__testResponse * soap_new__tempuri__testResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__testResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__testResponse * soap_new_req__tempuri__testResponse(
	struct soap *soap)
{
	_tempuri__testResponse *_p = soap_new__tempuri__testResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__testResponse * soap_new_set__tempuri__testResponse(
	struct soap *soap,
	char *testResult)
{
	_tempuri__testResponse *_p = soap_new__tempuri__testResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__testResponse::testResult = testResult;
	}
	return _p;
}

inline int soap_write__tempuri__testResponse(struct soap *soap, _tempuri__testResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:testResponse", p->soap_type() == SOAP_TYPE__tempuri__testResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__testResponse(struct soap *soap, const char *URL, _tempuri__testResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:testResponse", p->soap_type() == SOAP_TYPE__tempuri__testResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__testResponse(struct soap *soap, const char *URL, _tempuri__testResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:testResponse", p->soap_type() == SOAP_TYPE__tempuri__testResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__testResponse * SOAP_FMAC4 soap_get__tempuri__testResponse(struct soap*, _tempuri__testResponse *, const char*, const char*);

inline int soap_read__tempuri__testResponse(struct soap *soap, _tempuri__testResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__testResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__testResponse(struct soap *soap, const char *URL, _tempuri__testResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__testResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__testResponse(struct soap *soap, _tempuri__testResponse *p)
{
	if (soap_read__tempuri__testResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__test_DEFINED
#define SOAP_TYPE__tempuri__test_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__test(struct soap*, const char*, int, const _tempuri__test *, const char*);
SOAP_FMAC3 _tempuri__test * SOAP_FMAC4 soap_in__tempuri__test(struct soap*, const char*, _tempuri__test *, const char*);
SOAP_FMAC1 _tempuri__test * SOAP_FMAC2 soap_instantiate__tempuri__test(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__test * soap_new__tempuri__test(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__test(soap, n, NULL, NULL, NULL);
}

inline _tempuri__test * soap_new_req__tempuri__test(
	struct soap *soap,
	int i)
{
	_tempuri__test *_p = soap_new__tempuri__test(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__test::i = i;
	}
	return _p;
}

inline _tempuri__test * soap_new_set__tempuri__test(
	struct soap *soap,
	int i)
{
	_tempuri__test *_p = soap_new__tempuri__test(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__test::i = i;
	}
	return _p;
}

inline int soap_write__tempuri__test(struct soap *soap, _tempuri__test const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:test", p->soap_type() == SOAP_TYPE__tempuri__test ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__test(struct soap *soap, const char *URL, _tempuri__test const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:test", p->soap_type() == SOAP_TYPE__tempuri__test ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__test(struct soap *soap, const char *URL, _tempuri__test const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:test", p->soap_type() == SOAP_TYPE__tempuri__test ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__test * SOAP_FMAC4 soap_get__tempuri__test(struct soap*, _tempuri__test *, const char*, const char*);

inline int soap_read__tempuri__test(struct soap *soap, _tempuri__test *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__test(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__test(struct soap *soap, const char *URL, _tempuri__test *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__test(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__test(struct soap *soap, _tempuri__test *p)
{
	if (soap_read__tempuri__test(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___tempuri__DocAdd__DEFINED
#define SOAP_TYPE___tempuri__DocAdd__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__DocAdd_(struct soap*, struct __tempuri__DocAdd_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__DocAdd_(struct soap*, const struct __tempuri__DocAdd_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__DocAdd_(struct soap*, const char*, int, const struct __tempuri__DocAdd_ *, const char*);
SOAP_FMAC3 struct __tempuri__DocAdd_ * SOAP_FMAC4 soap_in___tempuri__DocAdd_(struct soap*, const char*, struct __tempuri__DocAdd_ *, const char*);
SOAP_FMAC1 struct __tempuri__DocAdd_ * SOAP_FMAC2 soap_instantiate___tempuri__DocAdd_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__DocAdd_ * soap_new___tempuri__DocAdd_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__DocAdd_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__DocAdd_ * soap_new_req___tempuri__DocAdd_(
	struct soap *soap)
{
	struct __tempuri__DocAdd_ *_p = soap_new___tempuri__DocAdd_(soap);
	if (_p)
	{	soap_default___tempuri__DocAdd_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__DocAdd_ * soap_new_set___tempuri__DocAdd_(
	struct soap *soap,
	_tempuri__DocAdd *tempuri__DocAdd)
{
	struct __tempuri__DocAdd_ *_p = soap_new___tempuri__DocAdd_(soap);
	if (_p)
	{	soap_default___tempuri__DocAdd_(soap, _p);
		_p->tempuri__DocAdd = tempuri__DocAdd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__DocAdd_(struct soap*, const struct __tempuri__DocAdd_ *, const char*, const char*);

inline int soap_write___tempuri__DocAdd_(struct soap *soap, struct __tempuri__DocAdd_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__DocAdd_(soap, p), 0) || soap_put___tempuri__DocAdd_(soap, p, "-tempuri:DocAdd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__DocAdd_(struct soap *soap, const char *URL, struct __tempuri__DocAdd_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__DocAdd_(soap, p), 0) || soap_put___tempuri__DocAdd_(soap, p, "-tempuri:DocAdd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__DocAdd_(struct soap *soap, const char *URL, struct __tempuri__DocAdd_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__DocAdd_(soap, p), 0) || soap_put___tempuri__DocAdd_(soap, p, "-tempuri:DocAdd", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__DocAdd_ * SOAP_FMAC4 soap_get___tempuri__DocAdd_(struct soap*, struct __tempuri__DocAdd_ *, const char*, const char*);

inline int soap_read___tempuri__DocAdd_(struct soap *soap, struct __tempuri__DocAdd_ *p)
{
	if (p)
	{	soap_default___tempuri__DocAdd_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__DocAdd_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__DocAdd_(struct soap *soap, const char *URL, struct __tempuri__DocAdd_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__DocAdd_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__DocAdd_(struct soap *soap, struct __tempuri__DocAdd_ *p)
{
	if (soap_read___tempuri__DocAdd_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__AnDonOver__DEFINED
#define SOAP_TYPE___tempuri__AnDonOver__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AnDonOver_(struct soap*, struct __tempuri__AnDonOver_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AnDonOver_(struct soap*, const struct __tempuri__AnDonOver_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AnDonOver_(struct soap*, const char*, int, const struct __tempuri__AnDonOver_ *, const char*);
SOAP_FMAC3 struct __tempuri__AnDonOver_ * SOAP_FMAC4 soap_in___tempuri__AnDonOver_(struct soap*, const char*, struct __tempuri__AnDonOver_ *, const char*);
SOAP_FMAC1 struct __tempuri__AnDonOver_ * SOAP_FMAC2 soap_instantiate___tempuri__AnDonOver_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AnDonOver_ * soap_new___tempuri__AnDonOver_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AnDonOver_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AnDonOver_ * soap_new_req___tempuri__AnDonOver_(
	struct soap *soap)
{
	struct __tempuri__AnDonOver_ *_p = soap_new___tempuri__AnDonOver_(soap);
	if (_p)
	{	soap_default___tempuri__AnDonOver_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AnDonOver_ * soap_new_set___tempuri__AnDonOver_(
	struct soap *soap,
	_tempuri__AnDonOver *tempuri__AnDonOver)
{
	struct __tempuri__AnDonOver_ *_p = soap_new___tempuri__AnDonOver_(soap);
	if (_p)
	{	soap_default___tempuri__AnDonOver_(soap, _p);
		_p->tempuri__AnDonOver = tempuri__AnDonOver;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AnDonOver_(struct soap*, const struct __tempuri__AnDonOver_ *, const char*, const char*);

inline int soap_write___tempuri__AnDonOver_(struct soap *soap, struct __tempuri__AnDonOver_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__AnDonOver_(soap, p), 0) || soap_put___tempuri__AnDonOver_(soap, p, "-tempuri:AnDonOver", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AnDonOver_(struct soap *soap, const char *URL, struct __tempuri__AnDonOver_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonOver_(soap, p), 0) || soap_put___tempuri__AnDonOver_(soap, p, "-tempuri:AnDonOver", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AnDonOver_(struct soap *soap, const char *URL, struct __tempuri__AnDonOver_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonOver_(soap, p), 0) || soap_put___tempuri__AnDonOver_(soap, p, "-tempuri:AnDonOver", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AnDonOver_ * SOAP_FMAC4 soap_get___tempuri__AnDonOver_(struct soap*, struct __tempuri__AnDonOver_ *, const char*, const char*);

inline int soap_read___tempuri__AnDonOver_(struct soap *soap, struct __tempuri__AnDonOver_ *p)
{
	if (p)
	{	soap_default___tempuri__AnDonOver_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__AnDonOver_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AnDonOver_(struct soap *soap, const char *URL, struct __tempuri__AnDonOver_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__AnDonOver_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__AnDonOver_(struct soap *soap, struct __tempuri__AnDonOver_ *p)
{
	if (soap_read___tempuri__AnDonOver_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__AnDonList__DEFINED
#define SOAP_TYPE___tempuri__AnDonList__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AnDonList_(struct soap*, struct __tempuri__AnDonList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AnDonList_(struct soap*, const struct __tempuri__AnDonList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AnDonList_(struct soap*, const char*, int, const struct __tempuri__AnDonList_ *, const char*);
SOAP_FMAC3 struct __tempuri__AnDonList_ * SOAP_FMAC4 soap_in___tempuri__AnDonList_(struct soap*, const char*, struct __tempuri__AnDonList_ *, const char*);
SOAP_FMAC1 struct __tempuri__AnDonList_ * SOAP_FMAC2 soap_instantiate___tempuri__AnDonList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AnDonList_ * soap_new___tempuri__AnDonList_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AnDonList_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AnDonList_ * soap_new_req___tempuri__AnDonList_(
	struct soap *soap)
{
	struct __tempuri__AnDonList_ *_p = soap_new___tempuri__AnDonList_(soap);
	if (_p)
	{	soap_default___tempuri__AnDonList_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AnDonList_ * soap_new_set___tempuri__AnDonList_(
	struct soap *soap,
	_tempuri__AnDonList *tempuri__AnDonList)
{
	struct __tempuri__AnDonList_ *_p = soap_new___tempuri__AnDonList_(soap);
	if (_p)
	{	soap_default___tempuri__AnDonList_(soap, _p);
		_p->tempuri__AnDonList = tempuri__AnDonList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AnDonList_(struct soap*, const struct __tempuri__AnDonList_ *, const char*, const char*);

inline int soap_write___tempuri__AnDonList_(struct soap *soap, struct __tempuri__AnDonList_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__AnDonList_(soap, p), 0) || soap_put___tempuri__AnDonList_(soap, p, "-tempuri:AnDonList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AnDonList_(struct soap *soap, const char *URL, struct __tempuri__AnDonList_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonList_(soap, p), 0) || soap_put___tempuri__AnDonList_(soap, p, "-tempuri:AnDonList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AnDonList_(struct soap *soap, const char *URL, struct __tempuri__AnDonList_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonList_(soap, p), 0) || soap_put___tempuri__AnDonList_(soap, p, "-tempuri:AnDonList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AnDonList_ * SOAP_FMAC4 soap_get___tempuri__AnDonList_(struct soap*, struct __tempuri__AnDonList_ *, const char*, const char*);

inline int soap_read___tempuri__AnDonList_(struct soap *soap, struct __tempuri__AnDonList_ *p)
{
	if (p)
	{	soap_default___tempuri__AnDonList_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__AnDonList_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AnDonList_(struct soap *soap, const char *URL, struct __tempuri__AnDonList_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__AnDonList_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__AnDonList_(struct soap *soap, struct __tempuri__AnDonList_ *p)
{
	if (soap_read___tempuri__AnDonList_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__AnDonStart__DEFINED
#define SOAP_TYPE___tempuri__AnDonStart__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AnDonStart_(struct soap*, struct __tempuri__AnDonStart_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AnDonStart_(struct soap*, const struct __tempuri__AnDonStart_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AnDonStart_(struct soap*, const char*, int, const struct __tempuri__AnDonStart_ *, const char*);
SOAP_FMAC3 struct __tempuri__AnDonStart_ * SOAP_FMAC4 soap_in___tempuri__AnDonStart_(struct soap*, const char*, struct __tempuri__AnDonStart_ *, const char*);
SOAP_FMAC1 struct __tempuri__AnDonStart_ * SOAP_FMAC2 soap_instantiate___tempuri__AnDonStart_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AnDonStart_ * soap_new___tempuri__AnDonStart_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AnDonStart_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AnDonStart_ * soap_new_req___tempuri__AnDonStart_(
	struct soap *soap)
{
	struct __tempuri__AnDonStart_ *_p = soap_new___tempuri__AnDonStart_(soap);
	if (_p)
	{	soap_default___tempuri__AnDonStart_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AnDonStart_ * soap_new_set___tempuri__AnDonStart_(
	struct soap *soap,
	_tempuri__AnDonStart *tempuri__AnDonStart)
{
	struct __tempuri__AnDonStart_ *_p = soap_new___tempuri__AnDonStart_(soap);
	if (_p)
	{	soap_default___tempuri__AnDonStart_(soap, _p);
		_p->tempuri__AnDonStart = tempuri__AnDonStart;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AnDonStart_(struct soap*, const struct __tempuri__AnDonStart_ *, const char*, const char*);

inline int soap_write___tempuri__AnDonStart_(struct soap *soap, struct __tempuri__AnDonStart_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__AnDonStart_(soap, p), 0) || soap_put___tempuri__AnDonStart_(soap, p, "-tempuri:AnDonStart", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AnDonStart_(struct soap *soap, const char *URL, struct __tempuri__AnDonStart_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonStart_(soap, p), 0) || soap_put___tempuri__AnDonStart_(soap, p, "-tempuri:AnDonStart", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AnDonStart_(struct soap *soap, const char *URL, struct __tempuri__AnDonStart_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonStart_(soap, p), 0) || soap_put___tempuri__AnDonStart_(soap, p, "-tempuri:AnDonStart", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AnDonStart_ * SOAP_FMAC4 soap_get___tempuri__AnDonStart_(struct soap*, struct __tempuri__AnDonStart_ *, const char*, const char*);

inline int soap_read___tempuri__AnDonStart_(struct soap *soap, struct __tempuri__AnDonStart_ *p)
{
	if (p)
	{	soap_default___tempuri__AnDonStart_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__AnDonStart_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AnDonStart_(struct soap *soap, const char *URL, struct __tempuri__AnDonStart_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__AnDonStart_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__AnDonStart_(struct soap *soap, struct __tempuri__AnDonStart_ *p)
{
	if (soap_read___tempuri__AnDonStart_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__LineInventory__DEFINED
#define SOAP_TYPE___tempuri__LineInventory__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__LineInventory_(struct soap*, struct __tempuri__LineInventory_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__LineInventory_(struct soap*, const struct __tempuri__LineInventory_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__LineInventory_(struct soap*, const char*, int, const struct __tempuri__LineInventory_ *, const char*);
SOAP_FMAC3 struct __tempuri__LineInventory_ * SOAP_FMAC4 soap_in___tempuri__LineInventory_(struct soap*, const char*, struct __tempuri__LineInventory_ *, const char*);
SOAP_FMAC1 struct __tempuri__LineInventory_ * SOAP_FMAC2 soap_instantiate___tempuri__LineInventory_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__LineInventory_ * soap_new___tempuri__LineInventory_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__LineInventory_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__LineInventory_ * soap_new_req___tempuri__LineInventory_(
	struct soap *soap)
{
	struct __tempuri__LineInventory_ *_p = soap_new___tempuri__LineInventory_(soap);
	if (_p)
	{	soap_default___tempuri__LineInventory_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__LineInventory_ * soap_new_set___tempuri__LineInventory_(
	struct soap *soap,
	_tempuri__LineInventory *tempuri__LineInventory)
{
	struct __tempuri__LineInventory_ *_p = soap_new___tempuri__LineInventory_(soap);
	if (_p)
	{	soap_default___tempuri__LineInventory_(soap, _p);
		_p->tempuri__LineInventory = tempuri__LineInventory;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__LineInventory_(struct soap*, const struct __tempuri__LineInventory_ *, const char*, const char*);

inline int soap_write___tempuri__LineInventory_(struct soap *soap, struct __tempuri__LineInventory_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__LineInventory_(soap, p), 0) || soap_put___tempuri__LineInventory_(soap, p, "-tempuri:LineInventory", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__LineInventory_(struct soap *soap, const char *URL, struct __tempuri__LineInventory_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventory_(soap, p), 0) || soap_put___tempuri__LineInventory_(soap, p, "-tempuri:LineInventory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__LineInventory_(struct soap *soap, const char *URL, struct __tempuri__LineInventory_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventory_(soap, p), 0) || soap_put___tempuri__LineInventory_(soap, p, "-tempuri:LineInventory", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__LineInventory_ * SOAP_FMAC4 soap_get___tempuri__LineInventory_(struct soap*, struct __tempuri__LineInventory_ *, const char*, const char*);

inline int soap_read___tempuri__LineInventory_(struct soap *soap, struct __tempuri__LineInventory_ *p)
{
	if (p)
	{	soap_default___tempuri__LineInventory_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__LineInventory_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__LineInventory_(struct soap *soap, const char *URL, struct __tempuri__LineInventory_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__LineInventory_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__LineInventory_(struct soap *soap, struct __tempuri__LineInventory_ *p)
{
	if (soap_read___tempuri__LineInventory_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__BillState__DEFINED
#define SOAP_TYPE___tempuri__BillState__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__BillState_(struct soap*, struct __tempuri__BillState_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__BillState_(struct soap*, const struct __tempuri__BillState_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__BillState_(struct soap*, const char*, int, const struct __tempuri__BillState_ *, const char*);
SOAP_FMAC3 struct __tempuri__BillState_ * SOAP_FMAC4 soap_in___tempuri__BillState_(struct soap*, const char*, struct __tempuri__BillState_ *, const char*);
SOAP_FMAC1 struct __tempuri__BillState_ * SOAP_FMAC2 soap_instantiate___tempuri__BillState_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__BillState_ * soap_new___tempuri__BillState_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__BillState_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__BillState_ * soap_new_req___tempuri__BillState_(
	struct soap *soap)
{
	struct __tempuri__BillState_ *_p = soap_new___tempuri__BillState_(soap);
	if (_p)
	{	soap_default___tempuri__BillState_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__BillState_ * soap_new_set___tempuri__BillState_(
	struct soap *soap,
	_tempuri__BillState *tempuri__BillState)
{
	struct __tempuri__BillState_ *_p = soap_new___tempuri__BillState_(soap);
	if (_p)
	{	soap_default___tempuri__BillState_(soap, _p);
		_p->tempuri__BillState = tempuri__BillState;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__BillState_(struct soap*, const struct __tempuri__BillState_ *, const char*, const char*);

inline int soap_write___tempuri__BillState_(struct soap *soap, struct __tempuri__BillState_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__BillState_(soap, p), 0) || soap_put___tempuri__BillState_(soap, p, "-tempuri:BillState", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__BillState_(struct soap *soap, const char *URL, struct __tempuri__BillState_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__BillState_(soap, p), 0) || soap_put___tempuri__BillState_(soap, p, "-tempuri:BillState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__BillState_(struct soap *soap, const char *URL, struct __tempuri__BillState_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__BillState_(soap, p), 0) || soap_put___tempuri__BillState_(soap, p, "-tempuri:BillState", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__BillState_ * SOAP_FMAC4 soap_get___tempuri__BillState_(struct soap*, struct __tempuri__BillState_ *, const char*, const char*);

inline int soap_read___tempuri__BillState_(struct soap *soap, struct __tempuri__BillState_ *p)
{
	if (p)
	{	soap_default___tempuri__BillState_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__BillState_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__BillState_(struct soap *soap, const char *URL, struct __tempuri__BillState_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__BillState_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__BillState_(struct soap *soap, struct __tempuri__BillState_ *p)
{
	if (soap_read___tempuri__BillState_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__ToolingTimes__DEFINED
#define SOAP_TYPE___tempuri__ToolingTimes__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__ToolingTimes_(struct soap*, struct __tempuri__ToolingTimes_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__ToolingTimes_(struct soap*, const struct __tempuri__ToolingTimes_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__ToolingTimes_(struct soap*, const char*, int, const struct __tempuri__ToolingTimes_ *, const char*);
SOAP_FMAC3 struct __tempuri__ToolingTimes_ * SOAP_FMAC4 soap_in___tempuri__ToolingTimes_(struct soap*, const char*, struct __tempuri__ToolingTimes_ *, const char*);
SOAP_FMAC1 struct __tempuri__ToolingTimes_ * SOAP_FMAC2 soap_instantiate___tempuri__ToolingTimes_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__ToolingTimes_ * soap_new___tempuri__ToolingTimes_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__ToolingTimes_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__ToolingTimes_ * soap_new_req___tempuri__ToolingTimes_(
	struct soap *soap)
{
	struct __tempuri__ToolingTimes_ *_p = soap_new___tempuri__ToolingTimes_(soap);
	if (_p)
	{	soap_default___tempuri__ToolingTimes_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__ToolingTimes_ * soap_new_set___tempuri__ToolingTimes_(
	struct soap *soap,
	_tempuri__ToolingTimes *tempuri__ToolingTimes)
{
	struct __tempuri__ToolingTimes_ *_p = soap_new___tempuri__ToolingTimes_(soap);
	if (_p)
	{	soap_default___tempuri__ToolingTimes_(soap, _p);
		_p->tempuri__ToolingTimes = tempuri__ToolingTimes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__ToolingTimes_(struct soap*, const struct __tempuri__ToolingTimes_ *, const char*, const char*);

inline int soap_write___tempuri__ToolingTimes_(struct soap *soap, struct __tempuri__ToolingTimes_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__ToolingTimes_(soap, p), 0) || soap_put___tempuri__ToolingTimes_(soap, p, "-tempuri:ToolingTimes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__ToolingTimes_(struct soap *soap, const char *URL, struct __tempuri__ToolingTimes_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__ToolingTimes_(soap, p), 0) || soap_put___tempuri__ToolingTimes_(soap, p, "-tempuri:ToolingTimes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__ToolingTimes_(struct soap *soap, const char *URL, struct __tempuri__ToolingTimes_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__ToolingTimes_(soap, p), 0) || soap_put___tempuri__ToolingTimes_(soap, p, "-tempuri:ToolingTimes", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__ToolingTimes_ * SOAP_FMAC4 soap_get___tempuri__ToolingTimes_(struct soap*, struct __tempuri__ToolingTimes_ *, const char*, const char*);

inline int soap_read___tempuri__ToolingTimes_(struct soap *soap, struct __tempuri__ToolingTimes_ *p)
{
	if (p)
	{	soap_default___tempuri__ToolingTimes_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__ToolingTimes_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__ToolingTimes_(struct soap *soap, const char *URL, struct __tempuri__ToolingTimes_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__ToolingTimes_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__ToolingTimes_(struct soap *soap, struct __tempuri__ToolingTimes_ *p)
{
	if (soap_read___tempuri__ToolingTimes_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__test__DEFINED
#define SOAP_TYPE___tempuri__test__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__test_(struct soap*, struct __tempuri__test_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__test_(struct soap*, const struct __tempuri__test_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__test_(struct soap*, const char*, int, const struct __tempuri__test_ *, const char*);
SOAP_FMAC3 struct __tempuri__test_ * SOAP_FMAC4 soap_in___tempuri__test_(struct soap*, const char*, struct __tempuri__test_ *, const char*);
SOAP_FMAC1 struct __tempuri__test_ * SOAP_FMAC2 soap_instantiate___tempuri__test_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__test_ * soap_new___tempuri__test_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__test_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__test_ * soap_new_req___tempuri__test_(
	struct soap *soap)
{
	struct __tempuri__test_ *_p = soap_new___tempuri__test_(soap);
	if (_p)
	{	soap_default___tempuri__test_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__test_ * soap_new_set___tempuri__test_(
	struct soap *soap,
	_tempuri__test *tempuri__test)
{
	struct __tempuri__test_ *_p = soap_new___tempuri__test_(soap);
	if (_p)
	{	soap_default___tempuri__test_(soap, _p);
		_p->tempuri__test = tempuri__test;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__test_(struct soap*, const struct __tempuri__test_ *, const char*, const char*);

inline int soap_write___tempuri__test_(struct soap *soap, struct __tempuri__test_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__test_(soap, p), 0) || soap_put___tempuri__test_(soap, p, "-tempuri:test", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__test_(struct soap *soap, const char *URL, struct __tempuri__test_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__test_(soap, p), 0) || soap_put___tempuri__test_(soap, p, "-tempuri:test", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__test_(struct soap *soap, const char *URL, struct __tempuri__test_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__test_(soap, p), 0) || soap_put___tempuri__test_(soap, p, "-tempuri:test", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__test_ * SOAP_FMAC4 soap_get___tempuri__test_(struct soap*, struct __tempuri__test_ *, const char*, const char*);

inline int soap_read___tempuri__test_(struct soap *soap, struct __tempuri__test_ *p)
{
	if (p)
	{	soap_default___tempuri__test_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__test_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__test_(struct soap *soap, const char *URL, struct __tempuri__test_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__test_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__test_(struct soap *soap, struct __tempuri__test_ *p)
{
	if (soap_read___tempuri__test_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__DocAdd_DEFINED
#define SOAP_TYPE___tempuri__DocAdd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__DocAdd(struct soap*, struct __tempuri__DocAdd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__DocAdd(struct soap*, const struct __tempuri__DocAdd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__DocAdd(struct soap*, const char*, int, const struct __tempuri__DocAdd *, const char*);
SOAP_FMAC3 struct __tempuri__DocAdd * SOAP_FMAC4 soap_in___tempuri__DocAdd(struct soap*, const char*, struct __tempuri__DocAdd *, const char*);
SOAP_FMAC1 struct __tempuri__DocAdd * SOAP_FMAC2 soap_instantiate___tempuri__DocAdd(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__DocAdd * soap_new___tempuri__DocAdd(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__DocAdd(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__DocAdd * soap_new_req___tempuri__DocAdd(
	struct soap *soap)
{
	struct __tempuri__DocAdd *_p = soap_new___tempuri__DocAdd(soap);
	if (_p)
	{	soap_default___tempuri__DocAdd(soap, _p);
	}
	return _p;
}

inline struct __tempuri__DocAdd * soap_new_set___tempuri__DocAdd(
	struct soap *soap,
	_tempuri__DocAdd *tempuri__DocAdd)
{
	struct __tempuri__DocAdd *_p = soap_new___tempuri__DocAdd(soap);
	if (_p)
	{	soap_default___tempuri__DocAdd(soap, _p);
		_p->tempuri__DocAdd = tempuri__DocAdd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__DocAdd(struct soap*, const struct __tempuri__DocAdd *, const char*, const char*);

inline int soap_write___tempuri__DocAdd(struct soap *soap, struct __tempuri__DocAdd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__DocAdd(soap, p), 0) || soap_put___tempuri__DocAdd(soap, p, "-tempuri:DocAdd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__DocAdd(struct soap *soap, const char *URL, struct __tempuri__DocAdd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__DocAdd(soap, p), 0) || soap_put___tempuri__DocAdd(soap, p, "-tempuri:DocAdd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__DocAdd(struct soap *soap, const char *URL, struct __tempuri__DocAdd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__DocAdd(soap, p), 0) || soap_put___tempuri__DocAdd(soap, p, "-tempuri:DocAdd", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__DocAdd * SOAP_FMAC4 soap_get___tempuri__DocAdd(struct soap*, struct __tempuri__DocAdd *, const char*, const char*);

inline int soap_read___tempuri__DocAdd(struct soap *soap, struct __tempuri__DocAdd *p)
{
	if (p)
	{	soap_default___tempuri__DocAdd(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__DocAdd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__DocAdd(struct soap *soap, const char *URL, struct __tempuri__DocAdd *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__DocAdd(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__DocAdd(struct soap *soap, struct __tempuri__DocAdd *p)
{
	if (soap_read___tempuri__DocAdd(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__AnDonOver_DEFINED
#define SOAP_TYPE___tempuri__AnDonOver_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AnDonOver(struct soap*, struct __tempuri__AnDonOver *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AnDonOver(struct soap*, const struct __tempuri__AnDonOver *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AnDonOver(struct soap*, const char*, int, const struct __tempuri__AnDonOver *, const char*);
SOAP_FMAC3 struct __tempuri__AnDonOver * SOAP_FMAC4 soap_in___tempuri__AnDonOver(struct soap*, const char*, struct __tempuri__AnDonOver *, const char*);
SOAP_FMAC1 struct __tempuri__AnDonOver * SOAP_FMAC2 soap_instantiate___tempuri__AnDonOver(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AnDonOver * soap_new___tempuri__AnDonOver(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AnDonOver(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AnDonOver * soap_new_req___tempuri__AnDonOver(
	struct soap *soap)
{
	struct __tempuri__AnDonOver *_p = soap_new___tempuri__AnDonOver(soap);
	if (_p)
	{	soap_default___tempuri__AnDonOver(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AnDonOver * soap_new_set___tempuri__AnDonOver(
	struct soap *soap,
	_tempuri__AnDonOver *tempuri__AnDonOver)
{
	struct __tempuri__AnDonOver *_p = soap_new___tempuri__AnDonOver(soap);
	if (_p)
	{	soap_default___tempuri__AnDonOver(soap, _p);
		_p->tempuri__AnDonOver = tempuri__AnDonOver;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AnDonOver(struct soap*, const struct __tempuri__AnDonOver *, const char*, const char*);

inline int soap_write___tempuri__AnDonOver(struct soap *soap, struct __tempuri__AnDonOver const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__AnDonOver(soap, p), 0) || soap_put___tempuri__AnDonOver(soap, p, "-tempuri:AnDonOver", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AnDonOver(struct soap *soap, const char *URL, struct __tempuri__AnDonOver const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonOver(soap, p), 0) || soap_put___tempuri__AnDonOver(soap, p, "-tempuri:AnDonOver", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AnDonOver(struct soap *soap, const char *URL, struct __tempuri__AnDonOver const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonOver(soap, p), 0) || soap_put___tempuri__AnDonOver(soap, p, "-tempuri:AnDonOver", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AnDonOver * SOAP_FMAC4 soap_get___tempuri__AnDonOver(struct soap*, struct __tempuri__AnDonOver *, const char*, const char*);

inline int soap_read___tempuri__AnDonOver(struct soap *soap, struct __tempuri__AnDonOver *p)
{
	if (p)
	{	soap_default___tempuri__AnDonOver(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__AnDonOver(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AnDonOver(struct soap *soap, const char *URL, struct __tempuri__AnDonOver *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__AnDonOver(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__AnDonOver(struct soap *soap, struct __tempuri__AnDonOver *p)
{
	if (soap_read___tempuri__AnDonOver(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__AnDonList_DEFINED
#define SOAP_TYPE___tempuri__AnDonList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AnDonList(struct soap*, struct __tempuri__AnDonList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AnDonList(struct soap*, const struct __tempuri__AnDonList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AnDonList(struct soap*, const char*, int, const struct __tempuri__AnDonList *, const char*);
SOAP_FMAC3 struct __tempuri__AnDonList * SOAP_FMAC4 soap_in___tempuri__AnDonList(struct soap*, const char*, struct __tempuri__AnDonList *, const char*);
SOAP_FMAC1 struct __tempuri__AnDonList * SOAP_FMAC2 soap_instantiate___tempuri__AnDonList(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AnDonList * soap_new___tempuri__AnDonList(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AnDonList(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AnDonList * soap_new_req___tempuri__AnDonList(
	struct soap *soap)
{
	struct __tempuri__AnDonList *_p = soap_new___tempuri__AnDonList(soap);
	if (_p)
	{	soap_default___tempuri__AnDonList(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AnDonList * soap_new_set___tempuri__AnDonList(
	struct soap *soap,
	_tempuri__AnDonList *tempuri__AnDonList)
{
	struct __tempuri__AnDonList *_p = soap_new___tempuri__AnDonList(soap);
	if (_p)
	{	soap_default___tempuri__AnDonList(soap, _p);
		_p->tempuri__AnDonList = tempuri__AnDonList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AnDonList(struct soap*, const struct __tempuri__AnDonList *, const char*, const char*);

inline int soap_write___tempuri__AnDonList(struct soap *soap, struct __tempuri__AnDonList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__AnDonList(soap, p), 0) || soap_put___tempuri__AnDonList(soap, p, "-tempuri:AnDonList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AnDonList(struct soap *soap, const char *URL, struct __tempuri__AnDonList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonList(soap, p), 0) || soap_put___tempuri__AnDonList(soap, p, "-tempuri:AnDonList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AnDonList(struct soap *soap, const char *URL, struct __tempuri__AnDonList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonList(soap, p), 0) || soap_put___tempuri__AnDonList(soap, p, "-tempuri:AnDonList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AnDonList * SOAP_FMAC4 soap_get___tempuri__AnDonList(struct soap*, struct __tempuri__AnDonList *, const char*, const char*);

inline int soap_read___tempuri__AnDonList(struct soap *soap, struct __tempuri__AnDonList *p)
{
	if (p)
	{	soap_default___tempuri__AnDonList(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__AnDonList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AnDonList(struct soap *soap, const char *URL, struct __tempuri__AnDonList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__AnDonList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__AnDonList(struct soap *soap, struct __tempuri__AnDonList *p)
{
	if (soap_read___tempuri__AnDonList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__AnDonStart_DEFINED
#define SOAP_TYPE___tempuri__AnDonStart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AnDonStart(struct soap*, struct __tempuri__AnDonStart *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AnDonStart(struct soap*, const struct __tempuri__AnDonStart *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AnDonStart(struct soap*, const char*, int, const struct __tempuri__AnDonStart *, const char*);
SOAP_FMAC3 struct __tempuri__AnDonStart * SOAP_FMAC4 soap_in___tempuri__AnDonStart(struct soap*, const char*, struct __tempuri__AnDonStart *, const char*);
SOAP_FMAC1 struct __tempuri__AnDonStart * SOAP_FMAC2 soap_instantiate___tempuri__AnDonStart(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AnDonStart * soap_new___tempuri__AnDonStart(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AnDonStart(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AnDonStart * soap_new_req___tempuri__AnDonStart(
	struct soap *soap)
{
	struct __tempuri__AnDonStart *_p = soap_new___tempuri__AnDonStart(soap);
	if (_p)
	{	soap_default___tempuri__AnDonStart(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AnDonStart * soap_new_set___tempuri__AnDonStart(
	struct soap *soap,
	_tempuri__AnDonStart *tempuri__AnDonStart)
{
	struct __tempuri__AnDonStart *_p = soap_new___tempuri__AnDonStart(soap);
	if (_p)
	{	soap_default___tempuri__AnDonStart(soap, _p);
		_p->tempuri__AnDonStart = tempuri__AnDonStart;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AnDonStart(struct soap*, const struct __tempuri__AnDonStart *, const char*, const char*);

inline int soap_write___tempuri__AnDonStart(struct soap *soap, struct __tempuri__AnDonStart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__AnDonStart(soap, p), 0) || soap_put___tempuri__AnDonStart(soap, p, "-tempuri:AnDonStart", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AnDonStart(struct soap *soap, const char *URL, struct __tempuri__AnDonStart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonStart(soap, p), 0) || soap_put___tempuri__AnDonStart(soap, p, "-tempuri:AnDonStart", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AnDonStart(struct soap *soap, const char *URL, struct __tempuri__AnDonStart const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonStart(soap, p), 0) || soap_put___tempuri__AnDonStart(soap, p, "-tempuri:AnDonStart", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AnDonStart * SOAP_FMAC4 soap_get___tempuri__AnDonStart(struct soap*, struct __tempuri__AnDonStart *, const char*, const char*);

inline int soap_read___tempuri__AnDonStart(struct soap *soap, struct __tempuri__AnDonStart *p)
{
	if (p)
	{	soap_default___tempuri__AnDonStart(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__AnDonStart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AnDonStart(struct soap *soap, const char *URL, struct __tempuri__AnDonStart *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__AnDonStart(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__AnDonStart(struct soap *soap, struct __tempuri__AnDonStart *p)
{
	if (soap_read___tempuri__AnDonStart(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__LineInventory_DEFINED
#define SOAP_TYPE___tempuri__LineInventory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__LineInventory(struct soap*, struct __tempuri__LineInventory *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__LineInventory(struct soap*, const struct __tempuri__LineInventory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__LineInventory(struct soap*, const char*, int, const struct __tempuri__LineInventory *, const char*);
SOAP_FMAC3 struct __tempuri__LineInventory * SOAP_FMAC4 soap_in___tempuri__LineInventory(struct soap*, const char*, struct __tempuri__LineInventory *, const char*);
SOAP_FMAC1 struct __tempuri__LineInventory * SOAP_FMAC2 soap_instantiate___tempuri__LineInventory(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__LineInventory * soap_new___tempuri__LineInventory(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__LineInventory(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__LineInventory * soap_new_req___tempuri__LineInventory(
	struct soap *soap)
{
	struct __tempuri__LineInventory *_p = soap_new___tempuri__LineInventory(soap);
	if (_p)
	{	soap_default___tempuri__LineInventory(soap, _p);
	}
	return _p;
}

inline struct __tempuri__LineInventory * soap_new_set___tempuri__LineInventory(
	struct soap *soap,
	_tempuri__LineInventory *tempuri__LineInventory)
{
	struct __tempuri__LineInventory *_p = soap_new___tempuri__LineInventory(soap);
	if (_p)
	{	soap_default___tempuri__LineInventory(soap, _p);
		_p->tempuri__LineInventory = tempuri__LineInventory;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__LineInventory(struct soap*, const struct __tempuri__LineInventory *, const char*, const char*);

inline int soap_write___tempuri__LineInventory(struct soap *soap, struct __tempuri__LineInventory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__LineInventory(soap, p), 0) || soap_put___tempuri__LineInventory(soap, p, "-tempuri:LineInventory", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__LineInventory(struct soap *soap, const char *URL, struct __tempuri__LineInventory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventory(soap, p), 0) || soap_put___tempuri__LineInventory(soap, p, "-tempuri:LineInventory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__LineInventory(struct soap *soap, const char *URL, struct __tempuri__LineInventory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventory(soap, p), 0) || soap_put___tempuri__LineInventory(soap, p, "-tempuri:LineInventory", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__LineInventory * SOAP_FMAC4 soap_get___tempuri__LineInventory(struct soap*, struct __tempuri__LineInventory *, const char*, const char*);

inline int soap_read___tempuri__LineInventory(struct soap *soap, struct __tempuri__LineInventory *p)
{
	if (p)
	{	soap_default___tempuri__LineInventory(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__LineInventory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__LineInventory(struct soap *soap, const char *URL, struct __tempuri__LineInventory *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__LineInventory(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__LineInventory(struct soap *soap, struct __tempuri__LineInventory *p)
{
	if (soap_read___tempuri__LineInventory(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__BillState_DEFINED
#define SOAP_TYPE___tempuri__BillState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__BillState(struct soap*, struct __tempuri__BillState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__BillState(struct soap*, const struct __tempuri__BillState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__BillState(struct soap*, const char*, int, const struct __tempuri__BillState *, const char*);
SOAP_FMAC3 struct __tempuri__BillState * SOAP_FMAC4 soap_in___tempuri__BillState(struct soap*, const char*, struct __tempuri__BillState *, const char*);
SOAP_FMAC1 struct __tempuri__BillState * SOAP_FMAC2 soap_instantiate___tempuri__BillState(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__BillState * soap_new___tempuri__BillState(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__BillState(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__BillState * soap_new_req___tempuri__BillState(
	struct soap *soap)
{
	struct __tempuri__BillState *_p = soap_new___tempuri__BillState(soap);
	if (_p)
	{	soap_default___tempuri__BillState(soap, _p);
	}
	return _p;
}

inline struct __tempuri__BillState * soap_new_set___tempuri__BillState(
	struct soap *soap,
	_tempuri__BillState *tempuri__BillState)
{
	struct __tempuri__BillState *_p = soap_new___tempuri__BillState(soap);
	if (_p)
	{	soap_default___tempuri__BillState(soap, _p);
		_p->tempuri__BillState = tempuri__BillState;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__BillState(struct soap*, const struct __tempuri__BillState *, const char*, const char*);

inline int soap_write___tempuri__BillState(struct soap *soap, struct __tempuri__BillState const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__BillState(soap, p), 0) || soap_put___tempuri__BillState(soap, p, "-tempuri:BillState", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__BillState(struct soap *soap, const char *URL, struct __tempuri__BillState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__BillState(soap, p), 0) || soap_put___tempuri__BillState(soap, p, "-tempuri:BillState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__BillState(struct soap *soap, const char *URL, struct __tempuri__BillState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__BillState(soap, p), 0) || soap_put___tempuri__BillState(soap, p, "-tempuri:BillState", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__BillState * SOAP_FMAC4 soap_get___tempuri__BillState(struct soap*, struct __tempuri__BillState *, const char*, const char*);

inline int soap_read___tempuri__BillState(struct soap *soap, struct __tempuri__BillState *p)
{
	if (p)
	{	soap_default___tempuri__BillState(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__BillState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__BillState(struct soap *soap, const char *URL, struct __tempuri__BillState *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__BillState(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__BillState(struct soap *soap, struct __tempuri__BillState *p)
{
	if (soap_read___tempuri__BillState(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__ToolingTimes_DEFINED
#define SOAP_TYPE___tempuri__ToolingTimes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__ToolingTimes(struct soap*, struct __tempuri__ToolingTimes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__ToolingTimes(struct soap*, const struct __tempuri__ToolingTimes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__ToolingTimes(struct soap*, const char*, int, const struct __tempuri__ToolingTimes *, const char*);
SOAP_FMAC3 struct __tempuri__ToolingTimes * SOAP_FMAC4 soap_in___tempuri__ToolingTimes(struct soap*, const char*, struct __tempuri__ToolingTimes *, const char*);
SOAP_FMAC1 struct __tempuri__ToolingTimes * SOAP_FMAC2 soap_instantiate___tempuri__ToolingTimes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__ToolingTimes * soap_new___tempuri__ToolingTimes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__ToolingTimes(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__ToolingTimes * soap_new_req___tempuri__ToolingTimes(
	struct soap *soap)
{
	struct __tempuri__ToolingTimes *_p = soap_new___tempuri__ToolingTimes(soap);
	if (_p)
	{	soap_default___tempuri__ToolingTimes(soap, _p);
	}
	return _p;
}

inline struct __tempuri__ToolingTimes * soap_new_set___tempuri__ToolingTimes(
	struct soap *soap,
	_tempuri__ToolingTimes *tempuri__ToolingTimes)
{
	struct __tempuri__ToolingTimes *_p = soap_new___tempuri__ToolingTimes(soap);
	if (_p)
	{	soap_default___tempuri__ToolingTimes(soap, _p);
		_p->tempuri__ToolingTimes = tempuri__ToolingTimes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__ToolingTimes(struct soap*, const struct __tempuri__ToolingTimes *, const char*, const char*);

inline int soap_write___tempuri__ToolingTimes(struct soap *soap, struct __tempuri__ToolingTimes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__ToolingTimes(soap, p), 0) || soap_put___tempuri__ToolingTimes(soap, p, "-tempuri:ToolingTimes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__ToolingTimes(struct soap *soap, const char *URL, struct __tempuri__ToolingTimes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__ToolingTimes(soap, p), 0) || soap_put___tempuri__ToolingTimes(soap, p, "-tempuri:ToolingTimes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__ToolingTimes(struct soap *soap, const char *URL, struct __tempuri__ToolingTimes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__ToolingTimes(soap, p), 0) || soap_put___tempuri__ToolingTimes(soap, p, "-tempuri:ToolingTimes", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__ToolingTimes * SOAP_FMAC4 soap_get___tempuri__ToolingTimes(struct soap*, struct __tempuri__ToolingTimes *, const char*, const char*);

inline int soap_read___tempuri__ToolingTimes(struct soap *soap, struct __tempuri__ToolingTimes *p)
{
	if (p)
	{	soap_default___tempuri__ToolingTimes(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__ToolingTimes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__ToolingTimes(struct soap *soap, const char *URL, struct __tempuri__ToolingTimes *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__ToolingTimes(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__ToolingTimes(struct soap *soap, struct __tempuri__ToolingTimes *p)
{
	if (soap_read___tempuri__ToolingTimes(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__test_DEFINED
#define SOAP_TYPE___tempuri__test_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__test(struct soap*, struct __tempuri__test *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__test(struct soap*, const struct __tempuri__test *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__test(struct soap*, const char*, int, const struct __tempuri__test *, const char*);
SOAP_FMAC3 struct __tempuri__test * SOAP_FMAC4 soap_in___tempuri__test(struct soap*, const char*, struct __tempuri__test *, const char*);
SOAP_FMAC1 struct __tempuri__test * SOAP_FMAC2 soap_instantiate___tempuri__test(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__test * soap_new___tempuri__test(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__test(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__test * soap_new_req___tempuri__test(
	struct soap *soap)
{
	struct __tempuri__test *_p = soap_new___tempuri__test(soap);
	if (_p)
	{	soap_default___tempuri__test(soap, _p);
	}
	return _p;
}

inline struct __tempuri__test * soap_new_set___tempuri__test(
	struct soap *soap,
	_tempuri__test *tempuri__test)
{
	struct __tempuri__test *_p = soap_new___tempuri__test(soap);
	if (_p)
	{	soap_default___tempuri__test(soap, _p);
		_p->tempuri__test = tempuri__test;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__test(struct soap*, const struct __tempuri__test *, const char*, const char*);

inline int soap_write___tempuri__test(struct soap *soap, struct __tempuri__test const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__test(soap, p), 0) || soap_put___tempuri__test(soap, p, "-tempuri:test", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__test(struct soap *soap, const char *URL, struct __tempuri__test const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__test(soap, p), 0) || soap_put___tempuri__test(soap, p, "-tempuri:test", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__test(struct soap *soap, const char *URL, struct __tempuri__test const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__test(soap, p), 0) || soap_put___tempuri__test(soap, p, "-tempuri:test", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__test * SOAP_FMAC4 soap_get___tempuri__test(struct soap*, struct __tempuri__test *, const char*, const char*);

inline int soap_read___tempuri__test(struct soap *soap, struct __tempuri__test *p)
{
	if (p)
	{	soap_default___tempuri__test(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__test(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__test(struct soap *soap, const char *URL, struct __tempuri__test *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__test(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__test(struct soap *soap, struct __tempuri__test *p)
{
	if (soap_read___tempuri__test(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__DocAdd_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__DocAdd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__DocAdd(struct soap*, _tempuri__DocAdd *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__DocAdd(struct soap*, const char *, int, _tempuri__DocAdd *const*, const char *);
SOAP_FMAC3 _tempuri__DocAdd ** SOAP_FMAC4 soap_in_PointerTo_tempuri__DocAdd(struct soap*, const char*, _tempuri__DocAdd **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__DocAdd(struct soap*, _tempuri__DocAdd *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__DocAdd ** SOAP_FMAC4 soap_get_PointerTo_tempuri__DocAdd(struct soap*, _tempuri__DocAdd **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__AnDonOver_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__AnDonOver_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__AnDonOver(struct soap*, _tempuri__AnDonOver *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__AnDonOver(struct soap*, const char *, int, _tempuri__AnDonOver *const*, const char *);
SOAP_FMAC3 _tempuri__AnDonOver ** SOAP_FMAC4 soap_in_PointerTo_tempuri__AnDonOver(struct soap*, const char*, _tempuri__AnDonOver **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__AnDonOver(struct soap*, _tempuri__AnDonOver *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__AnDonOver ** SOAP_FMAC4 soap_get_PointerTo_tempuri__AnDonOver(struct soap*, _tempuri__AnDonOver **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__AnDonList_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__AnDonList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__AnDonList(struct soap*, _tempuri__AnDonList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__AnDonList(struct soap*, const char *, int, _tempuri__AnDonList *const*, const char *);
SOAP_FMAC3 _tempuri__AnDonList ** SOAP_FMAC4 soap_in_PointerTo_tempuri__AnDonList(struct soap*, const char*, _tempuri__AnDonList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__AnDonList(struct soap*, _tempuri__AnDonList *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__AnDonList ** SOAP_FMAC4 soap_get_PointerTo_tempuri__AnDonList(struct soap*, _tempuri__AnDonList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__AnDonStart_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__AnDonStart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__AnDonStart(struct soap*, _tempuri__AnDonStart *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__AnDonStart(struct soap*, const char *, int, _tempuri__AnDonStart *const*, const char *);
SOAP_FMAC3 _tempuri__AnDonStart ** SOAP_FMAC4 soap_in_PointerTo_tempuri__AnDonStart(struct soap*, const char*, _tempuri__AnDonStart **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__AnDonStart(struct soap*, _tempuri__AnDonStart *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__AnDonStart ** SOAP_FMAC4 soap_get_PointerTo_tempuri__AnDonStart(struct soap*, _tempuri__AnDonStart **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__LineInventory_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__LineInventory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__LineInventory(struct soap*, _tempuri__LineInventory *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__LineInventory(struct soap*, const char *, int, _tempuri__LineInventory *const*, const char *);
SOAP_FMAC3 _tempuri__LineInventory ** SOAP_FMAC4 soap_in_PointerTo_tempuri__LineInventory(struct soap*, const char*, _tempuri__LineInventory **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__LineInventory(struct soap*, _tempuri__LineInventory *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__LineInventory ** SOAP_FMAC4 soap_get_PointerTo_tempuri__LineInventory(struct soap*, _tempuri__LineInventory **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__BillState_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__BillState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__BillState(struct soap*, _tempuri__BillState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__BillState(struct soap*, const char *, int, _tempuri__BillState *const*, const char *);
SOAP_FMAC3 _tempuri__BillState ** SOAP_FMAC4 soap_in_PointerTo_tempuri__BillState(struct soap*, const char*, _tempuri__BillState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__BillState(struct soap*, _tempuri__BillState *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__BillState ** SOAP_FMAC4 soap_get_PointerTo_tempuri__BillState(struct soap*, _tempuri__BillState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__ToolingTimes_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__ToolingTimes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ToolingTimes(struct soap*, _tempuri__ToolingTimes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ToolingTimes(struct soap*, const char *, int, _tempuri__ToolingTimes *const*, const char *);
SOAP_FMAC3 _tempuri__ToolingTimes ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ToolingTimes(struct soap*, const char*, _tempuri__ToolingTimes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ToolingTimes(struct soap*, _tempuri__ToolingTimes *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__ToolingTimes ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ToolingTimes(struct soap*, _tempuri__ToolingTimes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__test_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__test_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__test(struct soap*, _tempuri__test *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__test(struct soap*, const char *, int, _tempuri__test *const*, const char *);
SOAP_FMAC3 _tempuri__test ** SOAP_FMAC4 soap_in_PointerTo_tempuri__test(struct soap*, const char*, _tempuri__test **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__test(struct soap*, _tempuri__test *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__test ** SOAP_FMAC4 soap_get_PointerTo_tempuri__test(struct soap*, _tempuri__test **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
